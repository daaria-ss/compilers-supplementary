-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn    (string, expr)     |
--        Seq     (stmt, stmt)       |
--        Skip                       |
--        Read    (string)           |
--        Write   (expr)             |
--        If      (expr, stmt, stmt) |
--        While   (expr, stmt)       |
--        DoWhile (stmt, expr)

fun eval (c@[s, w], stmt) {
  case stmt of
     Assn (x, e) -> [s<-[x, evalExpr(s, e)], w]
  | Seq (s1, s2) -> eval (eval (c, s1), s2)
  | Skip         -> c
  | Read (x)     -> case readWorld (w) of
                      [n, w] -> [s <- [x,n], w]
                    esac
  | Write (e) -> [s, writeWorld (evalExpr (s, e), w)]
  | While (e, st) -> if evalExpr (s, e) == 0 
                        then c 
                      else 
                        case eval (c, st) of
                          c1 -> eval(c1, While(e, st)) 
                        esac
                      fi
  | If (e, s1, s2) -> if evalExpr (s, e) == 0 then
                        eval(c, s2)
                      else
                        eval(c, s1) 
                      fi  
  | DoWhile (st, e) -> eval (c, Seq (st, While(e, st)))

                                              
                                               
  esac

}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}
