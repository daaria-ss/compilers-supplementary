-- Expression evaluator

import List;
import State;
import World;
import Lexer;
import Parser;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (string, expr)       |
--        Seq     (expr, expr)         |
--        Skip                         |
--        Read    (string)             |
--        Write   (expr)               |
--        If      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Call    (string, expr list)  |
--        Ignore  (expr)

-- Helper function: checks that given name designates a regular variable in
-- a given state
fun checkVar (state, name) {
  case state.lookup (name) of
    Var (_) -> skip
  | _       -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
  esac
}

-- Helper function: checks that given name designates a function in
-- a given state
fun checkFun (state, name) {
  case state.lookup (name) of
    Fun (_, _) -> skip
  | _          -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
  esac
}

-- Helper function: adds a bunch of regular variables current scope
fun addNames (state, names) {
  foldl (fun (s, name) {s.addName (name, Var (0))}, state, names)
}

-- Helper function: adds a function in current scope
fun addFunction (state, name, args, body) {
  state.addName (name, Fun (args, body))
}
                                        
-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, v] -> [c, v : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

fun eval (c@[s, w], expr)  {
  case expr of

     Assn (x, e) -> case eval(c, e) of
                      [c1, v_e] ->  case eval(c1, x) of
                                      [c2@[s1, w1], Ref(v_x)] -> [[s1<-[v_x, v_e], w1], v_e]
                                    esac
                    esac  
    
  | Seq (s1, s2) -> case eval(c, s1) of
                      [c1, v] -> eval(c1, s2)
                    esac  
                    
  | Skip         -> [c, 0] 

  | Read  (ref)     ->  case eval (c, ref) of
                          [[s, w], Ref (x)] -> 
                            case readWorld (w) of
                              [n, w] -> [[s <- [x, n], w], 0]
                            esac
                        esac
  | Write (e) ->  case eval(c, e) of 
                    [c2@[s1, w1], v] -> [[s1, writeWorld (v, w)], 0]
                  esac

  | While (e, st) ->  case eval(c, e) of
                        [c2@[s1, w1], v] -> if v == 0 
                        then [c, 0] 
                      else 
                        case eval (c, st) of
                          [c2@[s1, w1], v1] -> eval(c2, While(e, st)) 
                        esac
                      fi
                      esac
             


  | If (e, s1, s2) -> case eval(c, e) of
                        [c2, v1] -> if v1 == 0 then
                          eval(c, s2)
                        else
                          eval(c, s1)
                        fi  
                      esac

  | DoWhile (st, e) -> eval (c, Seq (st, While(e, st)))                                     
  | Var (x) -> [c, s (x)]
  | Const (n) -> [c, n]
  | Binop (o, l, r) ->  case eval (c, l) of 
                          [c, l] -> 
                            case eval (c, r) of 
                              [c, r] -> [c, evalOp (o, l, r)]
                            esac 
                        esac
  | Ref (e)          ->  [c, Ref (e)]
  | Ignore (e)       ->  case eval (c, e) of
                          [c, w] -> [c, 0]
                        esac                                             
  esac

}
(* End *)


-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState (), createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}