-- Stack machine.

import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ         -> "READ"
  | WRITE        -> "WRITE"
  | BINOP (s)    -> sprintf ("BINOP %s", s)
  | LD    (x)    -> sprintf ("LD %s", x)
  | LDA   (x)    -> sprintf ("LDA %s", x)
  | ST    (x)    -> sprintf ("ST %s", x)
  | STI          -> "STI"
  | CONST (n)    -> sprintf ("CONST %d", n)
  | LABEL (s)    -> sprintf ("LABEL %s", s)
  | JMP   (l)    -> sprintf ("JMP %s", l)
  | CJMP  (c) -> sprintf ("CJMP %s", c)
  | DUP          -> "DUP"
  | DROP         -> "DROP"  
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, an SM-configuration and a program,
-- returns a final configuration
fun eval (env, c@[stack, st, world], insns) {
  --failure ("SM eval not implemented\n")
  case insns of
  {}                    -> c
  | (READ:cs)           -> case readWorld(world) of
                               [r, newWorld] -> eval(env, [r:stack, st, newWorld], cs)
                           esac

  | (WRITE:cs)          -> case stack of
                               (z:s)         -> eval(env, [s, st, writeWorld(z, world)], cs)
                           esac

  | (BINOP (op):cs)     -> case stack of
                                (y:x:s)      -> eval(env, [(evalOp (op, x, y)) : s, st, world], cs)
                           esac

  | (CONST (z):cs)      -> eval(env, [(z:stack), st, world], cs)

  | (LD (x):cs)         -> eval(env, [(st (x):stack), st, world], cs)

  | (LDA(x):cs)         -> eval(env, [x:stack, st, world], cs)

  | (ST (x):cs)         -> case stack of
                               (z:s)     -> eval(env, [(z:s), st <- [x, z], world], cs)
                           esac
  
  | (STI:cs)            -> case stack of
                               (z:x:s)   -> eval(env, [(z:s), st <- [x, z], world], cs) 
                            esac
  | (JMP (x):cs)        -> eval(env, c, fromLabel(env, x))   
  | (LABEL (x):cs)      -> eval(env, c, cs)
  | (CJMP (x):cs)       -> case stack of
                            (z:s) ->  if z then
                                        eval(env, [s, st, world], fromLabel(env, x)) 
                                      else 
                                        eval(env, [s, st, world], cs)  
                                      fi  
                           esac 
  | (DROP:cs)           -> case stack of
                            (x:s) -> eval(env, [s, st, world], cs)                               
                           esac
  esac



}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), [{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compilation environment: generates labels
fun makeCompEnv (n) {
  [fun () {
     [sprintf ("L%d", n), makeCompEnv (n+1)]
  }]
}

fun initCompEnv () {
  makeCompEnv (0)
}

-- Accessor function: generates one label
fun genLabel (env) {
  env [0] ()
}

-- Utility function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case env.genLabel of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

fun compileExpr (e) {
  e
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  fun label (lab, labUsed) {
    if labUsed
    then singletonBuffer (LABEL (lab))
    else emptyBuffer ()
    fi
  }

  fun compile (lab, env, stmt) {
    case stmt of
      Skip              -> [false, env, emptyBuffer ()]
    | Var    (x)        -> [false, env, singletonBuffer (LD (x))]
    | Ref    (x)        -> [false, env, singletonBuffer (LDA (x))]
    | Const  (n)        -> [false, env, singletonBuffer (CONST (n))]
    | Ignore (e)        -> case env.genLabel of
                              [eLab, env] ->
                                case compile(eLab, env, e) of 
                                  [eLabUsed, env, code] ->
                                    [false, env, code <+> label(eLab, eLabUsed) <+ DROP]
                                esac
                            esac
    -- | Read  (x)      -> [false, env, singletonBuffer (READ) <+ ST (x)]
    | Read  (x)         ->  case env.genLabel of
                              [sLab, env] -> 
                                case compile (sLab, env, x) of
                                  [sLabUsed, env, code] -> [false, env, code <+>
                                                                        label(sLab, sLabUsed) <+
                                                                        READ <+ 
                                                                        STI <+
                                                                        DROP]
                                esac
                            esac
    | Write (e)      -> case env.genLabel of
                              [sLab, env] -> 
                                case compile (sLab, env, e) of
                                  [sLabUsed, env, code] -> 
                                    [false, env, code <+> label (sLab, sLabUsed) <+ WRITE]
                                esac
                            esac
    
    -- [false, env, compileExpr (e) <+ WRITE]
    | Assn  (x, e)   ->   case env.genLabel of
                            [sLab1, env] ->
                              case env.genLabel of
                                [sLab2, env] -> 
                                  case compile (sLab1, env, x) of
                                    [sLabUsed1, env, code1] ->
                                      case compile (sLab2, env, e) of
                                        [sLabUsed2, env, code2] ->
                                          [false, env, code1 <+> 
                                          label (sLab1, sLabUsed1) <+> 
                                          code2 <+> label (sLab2, sLabUsed2) <+ STI]
                                      esac
                                  esac
                              esac
                          esac  
    
    
    
    -- [false, env, compileExpr (e) <+ ST (x)]
    | Seq   (s1, s2) ->
        case env.genLabel of
          [s2Lab, env] ->
             case compile (s2Lab, env, s1) of
               [s2LabUsed, env, s1Code] ->
                  case compile (lab, env, s2) of
                    [labUsed, env, s2Code] -> [labUsed, env, s1Code <+> label (s2Lab, s2LabUsed) <+> s2Code]
                  esac
             esac
        esac

    | If (e, s1, s2) -> 
      case env.genLabel of
        [ls, env] -> 
          case env.genLabel of
            [s2Lab, env] -> 
              case env.genLabel of
                [eLab, env] ->
                    case compile(s2Lab, env, s2) of
                      [s2LabUsed, env, s2Code] -> 
                        case compile (lab, env, s1) of
                            [labUsed, env, s1Code] -> 
                              case compile (eLab, env, e) of
                                [eLabUsed, env, eCode] ->
                              [true, env, eCode <+> label(eLab, eLabUsed) <+ CJMP (ls) <+> s2Code <+> 
                                label(s2Lab, s2LabUsed) <+ JMP (lab) <+ LABEL (ls) <+> s1Code]  
                        esac
                    esac
                esac
              esac             
          esac  
      esac
    | While (e, s) ->
      case env.genLabel of
        [ls, env] ->
          case env.genLabel of
            [le, env] ->
              case env.genLabel of
                [eLab, env] ->
                  case compile (eLab, env, e) of
                    [eLabUsed, env, eCode] ->
                      case compile(le, env, s) of
                          [sLabUsed, env, sCode] ->
                          [false, env, singletonBuffer (JMP (le)) <+ 
                          LABEL (ls) <+> 
                          sCode <+ 
                          LABEL (le) <+> 
                          eCode <+> 
                          label(eLab, eLabUsed) <+ CJMP (ls)] 
                      esac
                  esac 
              esac  
          esac
      esac
    | DoWhile (s, e) ->
      case env.genLabel of
        [ls, env] ->
          case env.genLabel of
            [le, env] ->
              case env.genLabel of
                [eLab, env] ->
                      case compile(le, env, s) of
                        [sLabUsed, env, sCode] ->
                          case compile (eLab, env, e) of
                            [eLabUsed, env, eCode] ->
                              [false, env, singletonBuffer (LABEL (ls))<+> 
                              sCode <+> 
                              label(le, sLabUsed) <+> 
                              eCode <+>
                              label(eLab, eLabUsed) <+ 
                              CJMP (ls)] 
                      esac
                  esac
              esac
          esac              
    esac

    | Binop (o, l, r)   ->  case env.genLabel of
                              [lLab, env] ->
                                case env.genLabel of
                                  [rLab, env] ->
                                    case compile (lLab, env, l) of
                                      [lLabUsed, env, lCode] ->
                                        case compile (rLab, env, r) of
                                          [rLabUsed, env, rCode] -> [false, env,  lCode <+> 
                                                                     label (lLab, lLabUsed) <+> 
                                                                      rCode <+>
                                                                      label (rLab, rLabUsed) <+
                                                                      BINOP (o)]
                                        esac
                                    esac
                                esac
                            esac
   esac                         
  }  

  case initCompEnv ().genLabel of
    [endLab, env] ->
       case compile (endLab, env, stmt) of
         [endLabUsed, _, code] -> getBuffer $ code <+> label (endLab, endLabUsed) 
       esac
  esac
}
