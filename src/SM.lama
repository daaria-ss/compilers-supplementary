-- Stack machine.

import List;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ      -> sprintf ("READ")
  | WRITE     -> sprintf ("WRITE")
  | BINOP (s) -> sprintf ("BINOP %s", s)
  | LD    (x) -> sprintf ("LD %s", x)
  | ST    (x) -> sprintf ("ST %s", x)
  | CONST (n) -> sprintf ("CONST %d", n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval (c@[stack, st, world], insns) {
  --failure ("SM eval not implemented\n")
  case insns of
  {}                    -> c
  | (READ:cs)           -> case readWorld(world) of
                               [r, newWorld] -> eval([r:stack, st, newWorld], cs)
                           esac

  | (WRITE:cs)          -> case stack of
                               (z:s)         -> eval([s, st, writeWorld(z, world)], cs)
                           esac

  | (BINOP (op):cs)     -> case stack of
                                (x:y:s)      -> eval([(evalOp (op) (x, y)) : s, st, world], cs)
                           esac

  | (CONST (z):cs)      -> eval([(z:stack), st, world], cs)

  | (LD (x):cs)         -> eval([(st (x):stack), st, world], cs)

  | (ST (x):cs)         -> case stack of
                               (z:s)     -> eval([s, st <- [x, z], world], cs)
                           esac
  esac



}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval ([{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list 
-- of stack machine instructions
fun compileExpr (expr) {
  -- failure ("compileExpr not implemented\n")
  case expr of
      Var (x)           -> {LD (x)}

    | Const (n)         -> {CONST (n)}

    | Binop (op, a, b)  -> compileExpr(b) +++ compileExpr(a) +++ {BINOP (op)}
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  -- failure ("compileSM not implemented\n")
  case (stmt) of

       Skip            ->    {}

    | Assn  (x, e)    -> compileExpr(e) +++ {ST(x)}

    | Seq     (s1, s2)  -> compileSM(s1) +++ compileSM(s2)

    | Read    (x)        -> {READ} +++ {ST(x)}

    | Write (e)        -> compileExpr(e) +++ {WRITE}
  esac
}
